<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Sold_Item;
use App\Customer_Order;
use Auth;
use Session;
use Illuminate\Support\Facades\Mail;
use App\Mail\SendOrder;
use App\Mail\OrderConfirmation;
use Carbon\Carbon;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\RedirectUrls;
use PayPal\Api\Transaction;
use PayPal\Api\ExecutePayment;
use PayPal\Api\PaymentExecution;

class PaypalController extends Controller
{



    public function payment(Request $request){  


          if (!session('address') && !session('cart')) {
            return back()->withErrors(['error','Error Please Retry']);
        }else{
        
            
                $apiContext = new \PayPal\Rest\ApiContext(
                  new \PayPal\Auth\OAuthTokenCredential(
                    "AaOWETQOsvghR3ih4FfxrTLwEWMDPUqfPw7wK9d4pTNF9i546wgN4X6eGvMdffl7qk9JCj5YsauIV0cc",
                    "EMMCcMlheBQjBgnWY_SIDt9GISV_Vu5ha-BelnJHUEx3kB6TqsPsBp0kKuA6A2HJY2MgFyo4ZaiPkQGl"
                  )
                );


                $apiContext->setConfig(
                    array(
                        'mode' => 'live',
                        'log.LogEnabled' => true,
                        'log.FileName' => 'PayPal.log',
                        'log.LogLevel' => 'FINE', // PLEASE USE `FINE` LEVEL FOR LOGGING IN LIVE ENVIRONMENTS
                        'cache.enabled' => true,
                         'validation.level' => 'log'

                    )
                );

                $payer = new Payer();
                $payer->setPaymentMethod("paypal");

                // Set redirect URLs
                $redirectUrls = new RedirectUrls();
                $redirectUrls->setReturnUrl('https://www.exceljewellers.com/process')
                  ->setCancelUrl('https://www.exceljewellers.com/shopcart');

                $k = 1;
                $rrr = array();
                $total_price =0;

                foreach(session('cart.shopping_cart') as $sku => $itemss){
                    ${"item_".$k} = new Item();
                    $rrr[] = ${"item_".$k}->setName($itemss['sku']." ".$itemss['name']) /** item name **/
                    ->setCurrency('CAD')
                    ->setQuantity(1)
                    ->setPrice($itemss['full_price']); /** unit price **/
                    $k++;
                }
                

                $item_list = new ItemList();
                $item_list->setItems($rrr);
                $shipping_cost = session('cart.shopping_cart_detail')['shipping_amount'];
                $tax = session('cart.shopping_cart_detail')['estimate_total_tax'];
                $subtotal = session('cart.shopping_cart_detail')['subtotal'];
                //session('address')['tax'] = 10;
                $total = session('cart.shopping_cart_detail')['total_cost'];

                if ($total != ($shipping_cost+$tax+$subtotal)) {
                    abort(404);
                }

                    $details = new Details();
                    $details->setShipping($shipping_cost)
                        ->setTax($tax)
                        ->setSubtotal($subtotal);
                
                    $amount = new Amount();
                    $amount->setCurrency("CAD")
                        ->setTotal($total)
                        ->setDetails($details);
                
                // Set transaction object
                
                $transaction = new Transaction();
                $transaction->setAmount($amount)
                ->setItemList($item_list)
                ->setDescription('Your transaction description');
                // Create the full payment object

                $payment = new Payment();
                $payment->setIntent('sale')
                  ->setPayer($payer)
                  ->setRedirectUrls($redirectUrls)
                  ->setTransactions(array($transaction));

                try {
                  $payment->create($apiContext);

                  $customer_order = [
                    "contact_name" => session('cart.address')['contact_name'],
                    "email_address"=>session('cart.address')['email_address'],
                    "phone_number" => session('cart.address')['phone_number'],
                    "address" => session('cart.address')['address'],
                    "unit" => session('cart.address')['unit'],
                    "country" => session('cart.address')['country'],
                    "spr" =>session('cart.address')['spr'],
                    "city" =>session('cart.address')['city'],
                    "zipcode" =>session('cart.address')['zipcode'],
                    "total_price"=>session('cart.shopping_cart_detail')['total_cost'],
                    "shipping_cost"=>session('cart.shopping_cart_detail')['amount'],
                    "tax"=>session('cart.shopping_cart_detail')['estimate_total_tax']
                  ];

    
                  session()->put('paypal', $customer_order);

                  // Get PayPal redirect URL and redirect the customer
                  $approvalUrl = $payment->getApprovalLink();
               //   $approvalUrl = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
                  return redirect($approvalUrl);

                  // Redirect the customer to $approvalUrl
                } catch (PayPal\Exception\PayPalConnectionException $ex) {
                  echo $ex->getCode();
                  echo $ex->getData();
                  die($ex);
                } catch (Exception $ex) {
                  die($ex);
                }

        

        }
    }


public function process(Request $request){
return 13;
    set_time_limit(0);
    $apiContext = new \PayPal\Rest\ApiContext(
        new \PayPal\Auth\OAuthTokenCredential(
            "AaOWETQOsvghR3ih4FfxrTLwEWMDPUqfPw7wK9d4pTNF9i546wgN4X6eGvMdffl7qk9JCj5YsauIV0cc",
            "EMMCcMlheBQjBgnWY_SIDt9GISV_Vu5ha-BelnJHUEx3kB6TqsPsBp0kKuA6A2HJY2MgFyo4ZaiPkQGl"
        )
    );

    $apiContext->setConfig(
        array(
            'mode' => 'live',
            'log.LogEnabled' => true,
            'log.FileName' => 'PayPal.log',
            'log.LogLevel' => 'FINE', // PLEASE USE `FINE` LEVEL FOR LOGGING IN LIVE ENVIRONMENTS
            'cache.enabled' => true,
            'validation.level' => 'log'
        )
    );

    $paymentId = $_GET['paymentId'];
    $payment = Payment::get($paymentId, $apiContext);
    $payerId = $_GET['PayerID'];

    // Execute payment with payer ID
    $execution = new PaymentExecution();
    $execution->setPayerId($payerId);

    try {
        // Execute payment
        $result = $payment->execute($execution, $apiContext);

        $order_num = 'I' . str_random(4) . now()->timestamp . Auth::id();

        foreach(session('cart.shopping_cart') as $sku => $item){

            $sold = new Sold_Item;
            $sold->order_num = $order_num;
            $sold->user_id = (Auth::id() or 0);
            $sold->item_sku = $item['sku'];
            $sold->img = $item['default_img'];
            $sold->item_style = $item['name'];
            $sold->sold_price = $item['price'];
            $sold->tax = $item['price']*session('paypal')['tax'];
            $sold->size = $item['size'];
            $sold->engraving = $item['engraving'];
            $sold->returns = $item['return'];
            if (isset($item['stone'])) {
                $sold->diamond_id=$item['stone']['stone_sku'];
                $sold->diamond_name=$item['stone']['name'];
                $sold->diamond_shape=$item['stone']['shape'];
                $sold->diamond_price=$item['stone']['price'];
            }
            $sold->save();

            if (isset($item['stone'])){

                $stone = [
                    "diamond_id" =>$item['stone']['stone_id'],
                    "diamond_sku" =>$item['stone']['stone_sku'],
                    "name"=>$item['stone']['name'],
                    "default_img"=>$item['stone']['default_img'],
                    "shape" =>$item['stone']['shape'],
                    "size" =>$item['stone']['size'],
                    "color" =>$item['stone']['color'],
                    "clarity" =>$item['stone']['clarity'],
                    "carat" =>$item['stone']['carat'],
                    "price" =>$item['stone']['price'],
                    "cert_num"=>$item['stone']['cert_num'],
                    "url"=>$item['stone']['url']
                ];

            }else{
                $diamond = null;
            }

            $order[] = [
                'order_num'=>$order_num,
                'item_sku'=>$item['sku'],
                'item_name'=>$item['name'],
                'price'=>$item['price'],
                'size'=>$item['size'],
                'brand'=>$item['brand'],
                'engraving'=>$item['engraving'],
                'link'=>$item['link'],
                'img'=>$item['default_img'],
                'stone'=>$stone
            ];

        }



        $cus_ord = new Customer_Order;
        $cus_ord->user_id = (Auth::id() or 0);
        $cus_ord->order_num = $order_num;
        $cus_ord->total_price = session('paypal')['total_price'];
        $cus_ord->shipping_cost = session('paypal')['shipping_cost'];
        $cus_ord->tax = (session('paypal')['total_price']+session('paypal')['shipping_cost'])*session('paypal')['tax'];
        $cus_ord->payment_method = "PayPal";
        $cus_ord->contact_name = session('paypal')['contact_name'];
        $cus_ord->phone_number = session('paypal')['phone_number'];
        $cus_ord->email_address = session('paypal')['email_address'];
        $cus_ord->address = session('paypal')['address'];
        $cus_ord->unit = session('paypal')['unit'];
        $cus_ord->country = session('paypal')['country'];
        $cus_ord->spr = session('paypal')['spr'];
        $cus_ord->city = session('paypal')['city'];
        $cus_ord->zipcode = session('paypal')['zipcode'];
        $cus_ord->save();

        $ip = file_get_contents("http://ipecho.net/plain");
        $url = 'http://ip-api.com/json/'.$ip;
        $tz = file_get_contents($url);
        $tz = json_decode($tz,true)['timezone'];

        $data = [
            'customer'=>[
            'user'=>Auth::id(),
            'contact_name'=>session('paypal')['contact_name'],
            'phone_number'=>session('paypal')['phone_number'],
            'address'=>session('paypal')['address'],
            'email'=>session('paypal')['email_address'],
            'country'=>session('paypal')['country'],
            'spr'=>session('paypal')['spr'],
            'city'=>session('paypal')['city'],
            'zipcode'=>session('paypal')['zipcode'],
            'total'=>session('paypal')['total_price'],
            'shipping'=>session('paypal')['shipping_cost'],
            'tax'=>session('paypal')['tax'],
            'time'=>carbon::now($tz)->addDays(30)->format('Y/m/d')
        ],
        'order'=>[
            $order
        ]
        ];

        Mail::to('brandonsanghuynh123@gmail.com')->send(new SendOrder($data));
        Mail::to('sales@exceljewellers.com')->send(new SendOrder($data));
        Mail::to('order@exceljewellers.com')->send(new SendOrder($data));
        Mail::to(session('paypal')['email_address'])->send(new OrderConfirmation($data));
        Session::forget('cart');
        return redirect('/thankyou')->with("thankyou","Thank You For Shopping With Us");
        } catch (PayPal\Exception\PayPalConnectionException $ex) {
        echo $ex->getCode();
        echo $ex->getData();
        die($ex);
        } catch (Exception $ex) {
        die($ex);
        }

    }

}